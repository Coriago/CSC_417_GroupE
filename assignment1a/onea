#!/usr/bin/env swipl

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PROLOG TUTOR
% ============
% File: "onea"
%
% Group  : E
% Authors: Gage Miller (dgmille2)
%          Daniel C. Mills (demills) 
%          Daniel C. Mills (dcmills2)
%
% Notes for Grader(s):  
% - To run:
%    1. Ensure swi-prolog is installed.
%    2. Make this file executable.
%    3. Run "./onea" 
% - Changes made by our group are wrapped in
%   by "BEGIN/END NEW FUNCTIONALITY" comments.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

:- dynamic fact/3. % can be retracted/asserted at runtime
fact(emp,tim,      [job=cleaner,mother=president]).
fact(emp,jane,     [job=president]).
fact(job,cleaner,  [salary=10000]).
fact(job,professor,[salary=30000]).

main :- tests, testNepotism.

% 1111111111111111111111111111111111111111111111111111111

% Operator definitions

:- op(902, xfx, if).
:- op(901, xfx, then).

%%%%% BEGIN NEW FUNCTIONALITY %%%%%

:- op(900,  fx, rule).

:- op(890, xfy,	and).
:- op(885, xfy,	or).
:- op(880,  fy,	not).

:- op(875, xfx, has).
:- op(870, xfy, had).
:- op(865, yfx, in).

%%%%%% END NEW FUNCTIONALITY %%%%%

rule1 if a then b.

rule 2 if a then b.

rule 3 if a and b then c.

rule 4 if a and b and c then d.

rule 5 if a or b and c and d then e.

rule 6 if a or b and c and d or e then f.

rule 7 if a or b and c and d or not e then f.

rule 8 if a or b and c and d or not e then f.

rule 9 if a or not (b and c and d) or e then f.

rule 10 if emp had job=_ then b.

% the the left of the first had, we match on functor and id
% "=" is inside "had"
rule 11 if emp = _ had job =_ then b.

% "X had Y" is inside "or"
rule 12 if a or emp = _ had job=_ then b.

% "X had Y" is inside "amd"
rule 13 if a or b and emp = _ had job=_ then c.

% there can be multiple "had" tests
rule 14 if a or b and emp = _ had job=_ had mother = _ then c.

% "in" is a keyword for set membership
rule 15 if emp = _ had job=_ had mother in [president,chancellor]  then c.

% inside a had, tests are "=", "\=", ">", "<", ">=", "=<"
rule 16 if  
     emp = _ had job=J had mother in [president,chancellor] and
     job = J had salary =< 10000 
then c.

rule nepotism 
if   
     emp = E had job=J had mother in [president,chancellor] and
     job = J had salary =< 10000 and
     job = J2 had salary > 20000
then
     emp =E has job = J2.

% 222222222222222222222222222222222222222222222222222222222222

% Get rule conditon testing on solo facts to work.

tests :- forall(test(N), test1(N)).

test1(X) :-
  nl,rule X if Condition then _,
  had(Condition),
  print(passed(Condition)), nl,!.
test1(X) :-
  print(failed(X)),nl.

test(11).

% 3333333333333333333333333333333333333333333333333333333333

% Add testing for set membership to they ssytem

test(15).

% 4444444444444444444444444444444444444444444444444444444444

% Add numeric testing.

test(16).

% 5555555555555555555555555555555555555555555555555555555555

% Get the nepotism rule to fire.

testNepotism :-
  listing(fact),
  nl,
  rule(nepotism) if Condition then Action,
  had(Condition),
  has(Action),
  listing(fact).

% 666666666666666666666666666666666666666666666666666666666

% Add "or" and "not" to "had" .
% Write rules and "test" facts to show that you can handle
% "or" and "not"

had(X and Y)      :- had(X), had(Y).
had(X =Id had Y)  :- fact(X,Id,Fs),  b4(Y,Fs).

%%%%% START NEW FUNCTIONALITY %%%%%

% "had" rules for "or" operator
had(X or _)       :- had(X).
had(_ or Y)       :- had(Y). 

% "had" rules for "not" operator 
had(not X)        :- not(had(X)).

%%%%% END NEW FUNCTIONALITY %%%%%

b4(X had Y,Fs)    :- b4(X,Fs), b4(Y,Fs).
b4(X =  Y, Fs)    :- member(X=Y,Fs).

%%%%% START NEW FUNCTIONALITY %%%%%

% "b4" rules for the "in" operator.
% Finds membership of the details in facts using in.
b4(X in [H|_], Fs)  :- member(X=H,Fs).
b4(X in [_|T], Fs)  :- b4(X in T, Fs).

% "b4" rules for numeric testing
b4(X =< Y, Fs)  :- member(X=Z, Fs), Z =< Y.
b4(X < Y, Fs)   :- member(X=Z, Fs), Z < Y.
b4(X >= Y, Fs)  :- member(X=Z, Fs), Z >= Y.
b4(X > Y, Fs)   :- member(X=Z, Fs), Z > Y. 
b4(X = Y, Fs)   :- member(X=Z, Fs), Z = Y.
b4(X \= Y, Fs)  :- member(X=Z, Fs), Z \= Y.

%%%%% END NEW FUNCTIONALITY %%%%%

% This is a complete implementation of "has"

has(X and Y)      :- has(X), has(Y).
has(X =Id has Y)  :- 
   retract(fact(X,Id,Old)), 
   now(Y,Old,New), 
   asserta(fact(X,Id,New)). 

now(X has Y, Old,New) :-  now(X,Old,Tmp), now(Y,Tmp,New).
now(X = Y,  Old, New) :-  switch(Old,X=Y,New).

switch([],_,[]).
switch([X=_Old | T],  X=New, [X=New|T]).
switch([Y=Old  | T0], X=New, [Y=Old|T]) :-
   X \= Y,
   switch(T0,X=New,T).

prints([]).    % termination
prints([H|T]) :- 
   print(H), nl,  % handle one thing
   prints(T).     % recurse to handle the rest

% current_op reports current definitions.

% setof collects, and sorts, results.
allOps :- setof([P,A,X],current_op(P,A,X),L), prints(L).

:- main.
:- halt.
